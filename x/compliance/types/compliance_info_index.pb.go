// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: compliance/compliance_info_index.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ComplianceInfoIndex struct {
	Vid               int32  `protobuf:"varint,1,opt,name=vid,proto3" json:"vid,omitempty"`
	Pid               int32  `protobuf:"varint,2,opt,name=pid,proto3" json:"pid,omitempty"`
	SoftwareVersion   uint32 `protobuf:"varint,3,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	CertificationType string `protobuf:"bytes,4,opt,name=certificationType,proto3" json:"certificationType,omitempty"`
}

func (m *ComplianceInfoIndex) Reset()         { *m = ComplianceInfoIndex{} }
func (m *ComplianceInfoIndex) String() string { return proto.CompactTextString(m) }
func (*ComplianceInfoIndex) ProtoMessage()    {}
func (*ComplianceInfoIndex) Descriptor() ([]byte, []int) {
	return fileDescriptor_25f3e3c9f2c177d8, []int{0}
}
func (m *ComplianceInfoIndex) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ComplianceInfoIndex) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ComplianceInfoIndex.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ComplianceInfoIndex) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ComplianceInfoIndex.Merge(m, src)
}
func (m *ComplianceInfoIndex) XXX_Size() int {
	return m.Size()
}
func (m *ComplianceInfoIndex) XXX_DiscardUnknown() {
	xxx_messageInfo_ComplianceInfoIndex.DiscardUnknown(m)
}

var xxx_messageInfo_ComplianceInfoIndex proto.InternalMessageInfo

func (m *ComplianceInfoIndex) GetVid() int32 {
	if m != nil {
		return m.Vid
	}
	return 0
}

func (m *ComplianceInfoIndex) GetPid() int32 {
	if m != nil {
		return m.Pid
	}
	return 0
}

func (m *ComplianceInfoIndex) GetSoftwareVersion() uint32 {
	if m != nil {
		return m.SoftwareVersion
	}
	return 0
}

func (m *ComplianceInfoIndex) GetCertificationType() string {
	if m != nil {
		return m.CertificationType
	}
	return ""
}

func init() {
	proto.RegisterType((*ComplianceInfoIndex)(nil), "zigbeealliance.distributedcomplianceledger.compliance.ComplianceInfoIndex")
}

func init() {
	proto.RegisterFile("compliance/compliance_info_index.proto", fileDescriptor_25f3e3c9f2c177d8)
}

var fileDescriptor_25f3e3c9f2c177d8 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x90, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0xb3, 0x9e, 0x0a, 0x2e, 0x88, 0x1a, 0x9b, 0x54, 0x4b, 0xb0, 0x90, 0x14, 0x26, 0x5b,
	0x88, 0x2f, 0xa0, 0xd5, 0x61, 0x17, 0xc4, 0xc2, 0xe6, 0x48, 0xb2, 0x93, 0x38, 0x10, 0x77, 0x97,
	0xcd, 0x9c, 0xde, 0xf9, 0x14, 0xfa, 0x56, 0x96, 0x57, 0x5a, 0x4a, 0xf2, 0x22, 0x12, 0x83, 0x26,
	0x78, 0xdd, 0xbf, 0xdf, 0xce, 0x0c, 0x7c, 0x3f, 0x3f, 0x2f, 0xcc, 0x93, 0xad, 0x31, 0xd3, 0x05,
	0xc8, 0x31, 0x2e, 0x50, 0x97, 0x66, 0x81, 0x5a, 0xc1, 0x2a, 0xb1, 0xce, 0x90, 0xf1, 0xaf, 0x5e,
	0xb1, 0xca, 0x01, 0xb2, 0x7a, 0x18, 0x48, 0x14, 0x36, 0xe4, 0x30, 0x5f, 0x12, 0xa8, 0x71, 0xad,
	0x06, 0x55, 0x81, 0x4b, 0x46, 0x70, 0xf6, 0xce, 0xf8, 0xe9, 0xcd, 0xdf, 0x73, 0xae, 0x4b, 0x33,
	0xef, 0x8f, 0xfa, 0xc7, 0x7c, 0xf6, 0x8c, 0x2a, 0x60, 0x21, 0x8b, 0xf6, 0xd2, 0x3e, 0xf6, 0xc4,
	0xa2, 0x0a, 0x76, 0x06, 0x62, 0x51, 0xf9, 0x11, 0x3f, 0x6a, 0x4c, 0x49, 0x2f, 0x99, 0x83, 0x7b,
	0x70, 0x0d, 0x1a, 0x1d, 0xcc, 0x42, 0x16, 0x1d, 0xa6, 0xff, 0xb1, 0x7f, 0xc1, 0x4f, 0x0a, 0x70,
	0x84, 0x25, 0x16, 0x19, 0xa1, 0xd1, 0x77, 0x6b, 0x0b, 0xc1, 0x6e, 0xc8, 0xa2, 0x83, 0x74, 0xfb,
	0xe3, 0x1a, 0x3e, 0x5a, 0xc1, 0x36, 0xad, 0x60, 0x5f, 0xad, 0x60, 0x6f, 0x9d, 0xf0, 0x36, 0x9d,
	0xf0, 0x3e, 0x3b, 0xe1, 0x3d, 0xdc, 0x56, 0x48, 0x8f, 0xcb, 0xbc, 0x17, 0x90, 0x83, 0x6f, 0xfc,
	0x2b, 0x2c, 0x27, 0xc2, 0xf1, 0x28, 0x18, 0x0f, 0xca, 0x72, 0x35, 0x29, 0x4f, 0xd2, 0xda, 0x42,
	0x93, 0xef, 0xff, 0x14, 0x77, 0xf9, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x70, 0x9f, 0xe5, 0xf9, 0x62,
	0x01, 0x00, 0x00,
}

func (m *ComplianceInfoIndex) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ComplianceInfoIndex) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ComplianceInfoIndex) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.CertificationType) > 0 {
		i -= len(m.CertificationType)
		copy(dAtA[i:], m.CertificationType)
		i = encodeVarintComplianceInfoIndex(dAtA, i, uint64(len(m.CertificationType)))
		i--
		dAtA[i] = 0x22
	}
	if m.SoftwareVersion != 0 {
		i = encodeVarintComplianceInfoIndex(dAtA, i, uint64(m.SoftwareVersion))
		i--
		dAtA[i] = 0x18
	}
	if m.Pid != 0 {
		i = encodeVarintComplianceInfoIndex(dAtA, i, uint64(m.Pid))
		i--
		dAtA[i] = 0x10
	}
	if m.Vid != 0 {
		i = encodeVarintComplianceInfoIndex(dAtA, i, uint64(m.Vid))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintComplianceInfoIndex(dAtA []byte, offset int, v uint64) int {
	offset -= sovComplianceInfoIndex(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ComplianceInfoIndex) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Vid != 0 {
		n += 1 + sovComplianceInfoIndex(uint64(m.Vid))
	}
	if m.Pid != 0 {
		n += 1 + sovComplianceInfoIndex(uint64(m.Pid))
	}
	if m.SoftwareVersion != 0 {
		n += 1 + sovComplianceInfoIndex(uint64(m.SoftwareVersion))
	}
	l = len(m.CertificationType)
	if l > 0 {
		n += 1 + l + sovComplianceInfoIndex(uint64(l))
	}
	return n
}

func sovComplianceInfoIndex(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozComplianceInfoIndex(x uint64) (n int) {
	return sovComplianceInfoIndex(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ComplianceInfoIndex) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowComplianceInfoIndex
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ComplianceInfoIndex: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ComplianceInfoIndex: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vid", wireType)
			}
			m.Vid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceInfoIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Vid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			m.Pid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceInfoIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pid |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			m.SoftwareVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceInfoIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SoftwareVersion |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertificationType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowComplianceInfoIndex
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthComplianceInfoIndex
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthComplianceInfoIndex
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertificationType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipComplianceInfoIndex(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthComplianceInfoIndex
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipComplianceInfoIndex(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowComplianceInfoIndex
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceInfoIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowComplianceInfoIndex
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthComplianceInfoIndex
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupComplianceInfoIndex
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthComplianceInfoIndex
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthComplianceInfoIndex        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowComplianceInfoIndex          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupComplianceInfoIndex = fmt.Errorf("proto: unexpected end of group")
)
