// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: validator/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryGetValidatorRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetValidatorRequest) Reset()         { *m = QueryGetValidatorRequest{} }
func (m *QueryGetValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorRequest) ProtoMessage()    {}
func (*QueryGetValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{0}
}
func (m *QueryGetValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorRequest.Merge(m, src)
}
func (m *QueryGetValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorRequest proto.InternalMessageInfo

func (m *QueryGetValidatorRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetValidatorResponse struct {
	Validator Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator"`
}

func (m *QueryGetValidatorResponse) Reset()         { *m = QueryGetValidatorResponse{} }
func (m *QueryGetValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetValidatorResponse) ProtoMessage()    {}
func (*QueryGetValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{1}
}
func (m *QueryGetValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetValidatorResponse.Merge(m, src)
}
func (m *QueryGetValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetValidatorResponse proto.InternalMessageInfo

func (m *QueryGetValidatorResponse) GetValidator() Validator {
	if m != nil {
		return m.Validator
	}
	return Validator{}
}

type QueryAllValidatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorRequest) Reset()         { *m = QueryAllValidatorRequest{} }
func (m *QueryAllValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorRequest) ProtoMessage()    {}
func (*QueryAllValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{2}
}
func (m *QueryAllValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorRequest.Merge(m, src)
}
func (m *QueryAllValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorRequest proto.InternalMessageInfo

func (m *QueryAllValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllValidatorResponse struct {
	Validator  []Validator         `protobuf:"bytes,1,rep,name=validator,proto3" json:"validator"`
	Pagination *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllValidatorResponse) Reset()         { *m = QueryAllValidatorResponse{} }
func (m *QueryAllValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllValidatorResponse) ProtoMessage()    {}
func (*QueryAllValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{3}
}
func (m *QueryAllValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllValidatorResponse.Merge(m, src)
}
func (m *QueryAllValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllValidatorResponse proto.InternalMessageInfo

func (m *QueryAllValidatorResponse) GetValidator() []Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *QueryAllValidatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetLastValidatorPowerRequest struct {
	Owner string `protobuf:"bytes,1,opt,name=owner,proto3" json:"owner,omitempty"`
}

func (m *QueryGetLastValidatorPowerRequest) Reset()         { *m = QueryGetLastValidatorPowerRequest{} }
func (m *QueryGetLastValidatorPowerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastValidatorPowerRequest) ProtoMessage()    {}
func (*QueryGetLastValidatorPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{4}
}
func (m *QueryGetLastValidatorPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastValidatorPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastValidatorPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastValidatorPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastValidatorPowerRequest.Merge(m, src)
}
func (m *QueryGetLastValidatorPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastValidatorPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastValidatorPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastValidatorPowerRequest proto.InternalMessageInfo

func (m *QueryGetLastValidatorPowerRequest) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

type QueryGetLastValidatorPowerResponse struct {
	LastValidatorPower LastValidatorPower `protobuf:"bytes,1,opt,name=lastValidatorPower,proto3" json:"lastValidatorPower"`
}

func (m *QueryGetLastValidatorPowerResponse) Reset()         { *m = QueryGetLastValidatorPowerResponse{} }
func (m *QueryGetLastValidatorPowerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetLastValidatorPowerResponse) ProtoMessage()    {}
func (*QueryGetLastValidatorPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{5}
}
func (m *QueryGetLastValidatorPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetLastValidatorPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetLastValidatorPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetLastValidatorPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetLastValidatorPowerResponse.Merge(m, src)
}
func (m *QueryGetLastValidatorPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetLastValidatorPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetLastValidatorPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetLastValidatorPowerResponse proto.InternalMessageInfo

func (m *QueryGetLastValidatorPowerResponse) GetLastValidatorPower() LastValidatorPower {
	if m != nil {
		return m.LastValidatorPower
	}
	return LastValidatorPower{}
}

type QueryAllLastValidatorPowerRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastValidatorPowerRequest) Reset()         { *m = QueryAllLastValidatorPowerRequest{} }
func (m *QueryAllLastValidatorPowerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastValidatorPowerRequest) ProtoMessage()    {}
func (*QueryAllLastValidatorPowerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{6}
}
func (m *QueryAllLastValidatorPowerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastValidatorPowerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastValidatorPowerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastValidatorPowerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastValidatorPowerRequest.Merge(m, src)
}
func (m *QueryAllLastValidatorPowerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastValidatorPowerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastValidatorPowerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastValidatorPowerRequest proto.InternalMessageInfo

func (m *QueryAllLastValidatorPowerRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllLastValidatorPowerResponse struct {
	LastValidatorPower []LastValidatorPower `protobuf:"bytes,1,rep,name=lastValidatorPower,proto3" json:"lastValidatorPower"`
	Pagination         *query.PageResponse  `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllLastValidatorPowerResponse) Reset()         { *m = QueryAllLastValidatorPowerResponse{} }
func (m *QueryAllLastValidatorPowerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllLastValidatorPowerResponse) ProtoMessage()    {}
func (*QueryAllLastValidatorPowerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{7}
}
func (m *QueryAllLastValidatorPowerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllLastValidatorPowerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllLastValidatorPowerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllLastValidatorPowerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllLastValidatorPowerResponse.Merge(m, src)
}
func (m *QueryAllLastValidatorPowerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllLastValidatorPowerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllLastValidatorPowerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllLastValidatorPowerResponse proto.InternalMessageInfo

func (m *QueryAllLastValidatorPowerResponse) GetLastValidatorPower() []LastValidatorPower {
	if m != nil {
		return m.LastValidatorPower
	}
	return nil
}

func (m *QueryAllLastValidatorPowerResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetProposedDisableValidatorRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetProposedDisableValidatorRequest) Reset() {
	*m = QueryGetProposedDisableValidatorRequest{}
}
func (m *QueryGetProposedDisableValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposedDisableValidatorRequest) ProtoMessage()    {}
func (*QueryGetProposedDisableValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{8}
}
func (m *QueryGetProposedDisableValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedDisableValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedDisableValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedDisableValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedDisableValidatorRequest.Merge(m, src)
}
func (m *QueryGetProposedDisableValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedDisableValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedDisableValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedDisableValidatorRequest proto.InternalMessageInfo

func (m *QueryGetProposedDisableValidatorRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetProposedDisableValidatorResponse struct {
	ProposedDisableValidator ProposedDisableValidator `protobuf:"bytes,1,opt,name=proposedDisableValidator,proto3" json:"proposedDisableValidator"`
}

func (m *QueryGetProposedDisableValidatorResponse) Reset() {
	*m = QueryGetProposedDisableValidatorResponse{}
}
func (m *QueryGetProposedDisableValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetProposedDisableValidatorResponse) ProtoMessage()    {}
func (*QueryGetProposedDisableValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{9}
}
func (m *QueryGetProposedDisableValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetProposedDisableValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetProposedDisableValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetProposedDisableValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetProposedDisableValidatorResponse.Merge(m, src)
}
func (m *QueryGetProposedDisableValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetProposedDisableValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetProposedDisableValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetProposedDisableValidatorResponse proto.InternalMessageInfo

func (m *QueryGetProposedDisableValidatorResponse) GetProposedDisableValidator() ProposedDisableValidator {
	if m != nil {
		return m.ProposedDisableValidator
	}
	return ProposedDisableValidator{}
}

type QueryAllProposedDisableValidatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedDisableValidatorRequest) Reset() {
	*m = QueryAllProposedDisableValidatorRequest{}
}
func (m *QueryAllProposedDisableValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposedDisableValidatorRequest) ProtoMessage()    {}
func (*QueryAllProposedDisableValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{10}
}
func (m *QueryAllProposedDisableValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedDisableValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedDisableValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedDisableValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedDisableValidatorRequest.Merge(m, src)
}
func (m *QueryAllProposedDisableValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedDisableValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedDisableValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedDisableValidatorRequest proto.InternalMessageInfo

func (m *QueryAllProposedDisableValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllProposedDisableValidatorResponse struct {
	ProposedDisableValidator []ProposedDisableValidator `protobuf:"bytes,1,rep,name=proposedDisableValidator,proto3" json:"proposedDisableValidator"`
	Pagination               *query.PageResponse        `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllProposedDisableValidatorResponse) Reset() {
	*m = QueryAllProposedDisableValidatorResponse{}
}
func (m *QueryAllProposedDisableValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllProposedDisableValidatorResponse) ProtoMessage()    {}
func (*QueryAllProposedDisableValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{11}
}
func (m *QueryAllProposedDisableValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllProposedDisableValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllProposedDisableValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllProposedDisableValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllProposedDisableValidatorResponse.Merge(m, src)
}
func (m *QueryAllProposedDisableValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllProposedDisableValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllProposedDisableValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllProposedDisableValidatorResponse proto.InternalMessageInfo

func (m *QueryAllProposedDisableValidatorResponse) GetProposedDisableValidator() []ProposedDisableValidator {
	if m != nil {
		return m.ProposedDisableValidator
	}
	return nil
}

func (m *QueryAllProposedDisableValidatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryGetDisabledValidatorRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryGetDisabledValidatorRequest) Reset()         { *m = QueryGetDisabledValidatorRequest{} }
func (m *QueryGetDisabledValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryGetDisabledValidatorRequest) ProtoMessage()    {}
func (*QueryGetDisabledValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{12}
}
func (m *QueryGetDisabledValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDisabledValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDisabledValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDisabledValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDisabledValidatorRequest.Merge(m, src)
}
func (m *QueryGetDisabledValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDisabledValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDisabledValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDisabledValidatorRequest proto.InternalMessageInfo

func (m *QueryGetDisabledValidatorRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

type QueryGetDisabledValidatorResponse struct {
	DisabledValidator DisabledValidator `protobuf:"bytes,1,opt,name=disabledValidator,proto3" json:"disabledValidator"`
}

func (m *QueryGetDisabledValidatorResponse) Reset()         { *m = QueryGetDisabledValidatorResponse{} }
func (m *QueryGetDisabledValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryGetDisabledValidatorResponse) ProtoMessage()    {}
func (*QueryGetDisabledValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{13}
}
func (m *QueryGetDisabledValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryGetDisabledValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryGetDisabledValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryGetDisabledValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryGetDisabledValidatorResponse.Merge(m, src)
}
func (m *QueryGetDisabledValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryGetDisabledValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryGetDisabledValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryGetDisabledValidatorResponse proto.InternalMessageInfo

func (m *QueryGetDisabledValidatorResponse) GetDisabledValidator() DisabledValidator {
	if m != nil {
		return m.DisabledValidator
	}
	return DisabledValidator{}
}

type QueryAllDisabledValidatorRequest struct {
	Pagination *query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDisabledValidatorRequest) Reset()         { *m = QueryAllDisabledValidatorRequest{} }
func (m *QueryAllDisabledValidatorRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllDisabledValidatorRequest) ProtoMessage()    {}
func (*QueryAllDisabledValidatorRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{14}
}
func (m *QueryAllDisabledValidatorRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDisabledValidatorRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDisabledValidatorRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDisabledValidatorRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDisabledValidatorRequest.Merge(m, src)
}
func (m *QueryAllDisabledValidatorRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDisabledValidatorRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDisabledValidatorRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDisabledValidatorRequest proto.InternalMessageInfo

func (m *QueryAllDisabledValidatorRequest) GetPagination() *query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return nil
}

type QueryAllDisabledValidatorResponse struct {
	DisabledValidator []DisabledValidator `protobuf:"bytes,1,rep,name=disabledValidator,proto3" json:"disabledValidator"`
	Pagination        *query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination,omitempty"`
}

func (m *QueryAllDisabledValidatorResponse) Reset()         { *m = QueryAllDisabledValidatorResponse{} }
func (m *QueryAllDisabledValidatorResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllDisabledValidatorResponse) ProtoMessage()    {}
func (*QueryAllDisabledValidatorResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_31b4d73ed8fedd8d, []int{15}
}
func (m *QueryAllDisabledValidatorResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllDisabledValidatorResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllDisabledValidatorResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllDisabledValidatorResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllDisabledValidatorResponse.Merge(m, src)
}
func (m *QueryAllDisabledValidatorResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllDisabledValidatorResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllDisabledValidatorResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllDisabledValidatorResponse proto.InternalMessageInfo

func (m *QueryAllDisabledValidatorResponse) GetDisabledValidator() []DisabledValidator {
	if m != nil {
		return m.DisabledValidator
	}
	return nil
}

func (m *QueryAllDisabledValidatorResponse) GetPagination() *query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryGetValidatorRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetValidatorRequest")
	proto.RegisterType((*QueryGetValidatorResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetValidatorResponse")
	proto.RegisterType((*QueryAllValidatorRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllValidatorRequest")
	proto.RegisterType((*QueryAllValidatorResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllValidatorResponse")
	proto.RegisterType((*QueryGetLastValidatorPowerRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetLastValidatorPowerRequest")
	proto.RegisterType((*QueryGetLastValidatorPowerResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetLastValidatorPowerResponse")
	proto.RegisterType((*QueryAllLastValidatorPowerRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllLastValidatorPowerRequest")
	proto.RegisterType((*QueryAllLastValidatorPowerResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllLastValidatorPowerResponse")
	proto.RegisterType((*QueryGetProposedDisableValidatorRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetProposedDisableValidatorRequest")
	proto.RegisterType((*QueryGetProposedDisableValidatorResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetProposedDisableValidatorResponse")
	proto.RegisterType((*QueryAllProposedDisableValidatorRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllProposedDisableValidatorRequest")
	proto.RegisterType((*QueryAllProposedDisableValidatorResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllProposedDisableValidatorResponse")
	proto.RegisterType((*QueryGetDisabledValidatorRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetDisabledValidatorRequest")
	proto.RegisterType((*QueryGetDisabledValidatorResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryGetDisabledValidatorResponse")
	proto.RegisterType((*QueryAllDisabledValidatorRequest)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllDisabledValidatorRequest")
	proto.RegisterType((*QueryAllDisabledValidatorResponse)(nil), "zigbeealliance.distributedcomplianceledger.validator.QueryAllDisabledValidatorResponse")
}

func init() { proto.RegisterFile("validator/query.proto", fileDescriptor_31b4d73ed8fedd8d) }

var fileDescriptor_31b4d73ed8fedd8d = []byte{
	// 939 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x98, 0xc1, 0x4f, 0xfc, 0x44,
	0x14, 0xc7, 0x77, 0x76, 0xfd, 0x69, 0x18, 0x4d, 0x0c, 0x93, 0xc5, 0x2c, 0xeb, 0x66, 0xc5, 0x09,
	0x11, 0xb2, 0x61, 0xdb, 0x80, 0xc4, 0x13, 0x89, 0x59, 0x34, 0x62, 0x88, 0x51, 0x5c, 0x12, 0x30,
	0x26, 0xb8, 0x69, 0xb7, 0x93, 0x5a, 0x1d, 0x3a, 0xa5, 0xd3, 0x05, 0x91, 0x60, 0x8c, 0x07, 0xcf,
	0x24, 0x1e, 0xbc, 0x7a, 0xf0, 0x3f, 0xd0, 0xab, 0x77, 0x3c, 0x98, 0x10, 0xbc, 0x78, 0x32, 0x06,
	0xbc, 0x78, 0xd0, 0x0b, 0x37, 0x4f, 0xbf, 0xb4, 0x33, 0xdd, 0xc2, 0xb6, 0xdd, 0x85, 0x6d, 0x97,
	0x5b, 0xcb, 0xbc, 0x79, 0xef, 0x7d, 0xbe, 0xef, 0x75, 0xde, 0xb0, 0x70, 0xe6, 0x50, 0xa3, 0x96,
	0xa1, 0x79, 0xcc, 0x55, 0x0f, 0x7a, 0xc4, 0x3d, 0x56, 0x1c, 0x97, 0x79, 0x0c, 0xad, 0x7e, 0x69,
	0x99, 0x3a, 0x21, 0x1a, 0xa5, 0x96, 0x66, 0x77, 0x89, 0x62, 0x58, 0xdc, 0x73, 0x2d, 0xbd, 0xe7,
	0x11, 0xa3, 0xcb, 0xf6, 0x1d, 0xf1, 0x57, 0x4a, 0x0c, 0x93, 0xb8, 0x4a, 0xdf, 0x43, 0xb5, 0x66,
	0x32, 0x66, 0x52, 0xa2, 0x6a, 0x8e, 0xa5, 0x6a, 0xb6, 0xcd, 0x3c, 0xcd, 0xb3, 0x98, 0xcd, 0x85,
	0xcf, 0x6a, 0xa3, 0xcb, 0xf8, 0x3e, 0xe3, 0xaa, 0xae, 0x71, 0x22, 0x82, 0xa9, 0x87, 0xcb, 0x3a,
	0xf1, 0xb4, 0x65, 0xd5, 0xd1, 0x4c, 0xcb, 0x0e, 0x8c, 0xa5, 0xed, 0x6c, 0x94, 0x56, 0xff, 0x49,
	0x2e, 0xcd, 0x47, 0x4b, 0x54, 0xe3, 0x5e, 0xa7, 0xff, 0xda, 0x71, 0xd8, 0x11, 0x09, 0xad, 0x1a,
	0x91, 0x95, 0xe3, 0x32, 0x87, 0x71, 0x62, 0x74, 0x0c, 0x8b, 0x6b, 0x3a, 0x25, 0x9d, 0x41, 0x8f,
	0x38, 0xb2, 0x95, 0x26, 0x46, 0xcc, 0xa6, 0x6c, 0x32, 0x93, 0x05, 0x8f, 0xaa, 0xff, 0x14, 0xa6,
	0x29, 0x90, 0x3a, 0x62, 0x41, 0xbc, 0x88, 0x25, 0xbc, 0x09, 0x2b, 0x1f, 0xfa, 0x8c, 0x1b, 0xc4,
	0xdb, 0x09, 0x7d, 0xb5, 0xc9, 0x41, 0x8f, 0x70, 0x0f, 0x29, 0xf0, 0x09, 0x3b, 0xb2, 0x89, 0x5b,
	0x01, 0x73, 0x60, 0x71, 0x6a, 0xbd, 0x72, 0xf9, 0x73, 0xb3, 0x2c, 0x37, 0xb7, 0x0c, 0xc3, 0x25,
	0x9c, 0x6f, 0x7b, 0xae, 0x65, 0x9b, 0x6d, 0x61, 0x86, 0xbf, 0x06, 0x70, 0x36, 0xc1, 0x19, 0x77,
	0x98, 0xcd, 0x09, 0xea, 0xc2, 0xa9, 0x7e, 0xb6, 0x81, 0xc7, 0xe7, 0x57, 0xde, 0x54, 0xc6, 0xa9,
	0x9f, 0xd2, 0xf7, 0xbd, 0xfe, 0xcc, 0xf9, 0x9f, 0xaf, 0x14, 0xda, 0x91, 0x5f, 0xac, 0x4b, 0x9c,
	0x16, 0xa5, 0x31, 0x9c, 0x77, 0x20, 0x8c, 0x0a, 0x28, 0x33, 0x78, 0x4d, 0x91, 0x40, 0x7e, 0xb5,
	0x15, 0xd1, 0x5a, 0xb2, 0xda, 0xca, 0x96, 0x66, 0x12, 0xb9, 0xb7, 0x7d, 0x6b, 0x27, 0xfe, 0x35,
	0xc4, 0xbc, 0x1b, 0x24, 0x19, 0xb3, 0x34, 0x09, 0x4c, 0xb4, 0x71, 0x07, 0xa5, 0x18, 0xa0, 0x2c,
	0x8c, 0x44, 0x11, 0x19, 0xde, 0x61, 0xd9, 0x86, 0xaf, 0x86, 0x15, 0x7b, 0x4f, 0xe3, 0x51, 0xd5,
	0xb6, 0xfc, 0x1e, 0x1d, 0xb7, 0x0f, 0x7e, 0x04, 0x10, 0x0f, 0xf3, 0x2a, 0x95, 0xfa, 0x0a, 0x22,
	0x1a, 0x5b, 0x95, 0x75, 0x79, 0x77, 0x3c, 0xc9, 0xe2, 0xd1, 0xa4, 0x76, 0x09, 0x91, 0xf0, 0xe7,
	0x92, 0xbd, 0x45, 0x69, 0x3a, 0x7b, 0x5e, 0x4d, 0xf3, 0x6f, 0xa8, 0x49, 0x4a, 0xb4, 0x11, 0x9a,
	0x94, 0x1e, 0x47, 0x93, 0xfc, 0x1a, 0xeb, 0x2d, 0xb8, 0x10, 0xb6, 0xc0, 0x96, 0x3c, 0xd8, 0xde,
	0x16, 0x87, 0x56, 0xec, 0xbb, 0xac, 0xc0, 0xe7, 0x34, 0xd1, 0x46, 0xa2, 0xc1, 0xda, 0xe1, 0x2b,
	0xfe, 0x05, 0xc0, 0xc5, 0xd1, 0x5e, 0xa4, 0x74, 0x67, 0x00, 0x56, 0x9c, 0x14, 0x23, 0x59, 0xb8,
	0xf7, 0xc7, 0x53, 0x30, 0x2d, 0xb4, 0xd4, 0x31, 0x35, 0x2a, 0x3e, 0x90, 0x22, 0xb4, 0x28, 0x1d,
	0x25, 0x42, 0x5e, 0x7d, 0xf6, 0x6d, 0x51, 0x4a, 0x36, 0x34, 0xe6, 0xfd, 0x24, 0x2b, 0x3d, 0xbe,
	0x64, 0xf9, 0x35, 0xe0, 0x1a, 0x9c, 0x0b, 0x5b, 0x47, 0x06, 0x31, 0x1e, 0xd0, 0x79, 0x3f, 0x80,
	0xe8, 0x60, 0x4c, 0xd8, 0x2e, 0xf5, 0x3b, 0x81, 0xd3, 0xc6, 0xe0, 0xa2, 0xac, 0xdd, 0xc6, 0x78,
	0xba, 0xc5, 0x62, 0x49, 0xc1, 0xe2, 0x71, 0xf0, 0x67, 0x12, 0xb0, 0x45, 0x69, 0x2a, 0x60, 0x5e,
	0x5d, 0xf5, 0x0f, 0x88, 0xce, 0xca, 0x07, 0xcb, 0x51, 0x7a, 0x0c, 0x39, 0x72, 0x6b, 0x9c, 0x95,
	0x9f, 0x5e, 0x84, 0x4f, 0x02, 0x56, 0x74, 0x09, 0xe0, 0x54, 0x14, 0x60, 0xcc, 0x2f, 0x21, 0xed,
	0x76, 0x55, 0xfd, 0x20, 0x37, 0x7f, 0x02, 0x02, 0xcf, 0x7f, 0xf3, 0xfb, 0xdf, 0xdf, 0x15, 0xeb,
	0xa8, 0xa6, 0x1a, 0x5d, 0x1a, 0xdd, 0x47, 0x55, 0x9b, 0x19, 0x84, 0xab, 0x27, 0xc1, 0x6c, 0x3e,
	0x45, 0xbf, 0x01, 0xf8, 0x42, 0x7f, 0x6f, 0x8b, 0xd2, 0x4c, 0x5c, 0x09, 0xd7, 0xac, 0x4c, 0x5c,
	0x49, 0x37, 0x2a, 0x5c, 0x0b, 0xb8, 0x5e, 0x42, 0xe5, 0x24, 0x2e, 0x74, 0x03, 0x20, 0x8a, 0x8f,
	0x38, 0xb4, 0x9b, 0x4d, 0xdd, 0xd4, 0x0b, 0x41, 0xf5, 0xa3, 0xfc, 0x1d, 0x4b, 0xce, 0x46, 0xc0,
	0x39, 0x8f, 0xf0, 0x00, 0xa7, 0x3f, 0xa6, 0x9b, 0xc1, 0x3f, 0x0d, 0x51, 0x15, 0xff, 0x03, 0x70,
	0x26, 0xee, 0xca, 0x2f, 0xe7, 0x6e, 0x36, 0xf9, 0x27, 0x03, 0x3e, 0xf4, 0xd2, 0x83, 0x71, 0x00,
	0x5e, 0x43, 0xd5, 0x74, 0x70, 0xf4, 0x7d, 0x11, 0x56, 0xd2, 0x86, 0x0a, 0xda, 0xcb, 0x56, 0x93,
	0x11, 0xb3, 0xb9, 0xfa, 0xc9, 0xa4, 0xdc, 0x4b, 0xfe, 0xb5, 0x80, 0xff, 0x0d, 0xb4, 0x3a, 0xc0,
	0x1f, 0x0e, 0xc9, 0xa6, 0x3c, 0xed, 0x9a, 0xfd, 0x25, 0xae, 0x9e, 0xc8, 0x49, 0x75, 0x8a, 0xce,
	0x8a, 0xf0, 0xe5, 0xb4, 0x10, 0x7e, 0x43, 0xec, 0x65, 0xab, 0xdb, 0x24, 0xc5, 0xb9, 0xc7, 0x1d,
	0x05, 0xaf, 0x04, 0xe2, 0x2c, 0xa1, 0xc6, 0xfd, 0xc5, 0x41, 0xff, 0x03, 0x38, 0x1d, 0x1b, 0x1d,
	0x68, 0x27, 0x5b, 0x19, 0xd3, 0x86, 0x6c, 0x75, 0x37, 0x77, 0xbf, 0x12, 0x7d, 0x35, 0x40, 0x57,
	0xd0, 0xd2, 0x00, 0x7a, 0x38, 0xfc, 0x92, 0xfb, 0xe1, 0x06, 0xc0, 0x72, 0xcc, 0xa7, 0xdf, 0x08,
	0x3b, 0xd9, 0x2a, 0x35, 0x11, 0xfe, 0x61, 0xf7, 0x89, 0xd4, 0x03, 0x31, 0x81, 0x7f, 0xdd, 0x38,
	0xbf, 0xaa, 0x83, 0x8b, 0xab, 0x3a, 0xf8, 0xeb, 0xaa, 0x0e, 0xce, 0xae, 0xeb, 0x85, 0x8b, 0xeb,
	0x7a, 0xe1, 0x8f, 0xeb, 0x7a, 0xe1, 0xe3, 0x4d, 0xd3, 0xf2, 0x3e, 0xed, 0xe9, 0x4a, 0x97, 0xed,
	0xab, 0x22, 0xd1, 0x66, 0x98, 0xa9, 0x7a, 0x2b, 0xd3, 0x66, 0x94, 0x6a, 0x53, 0xe4, 0xaa, 0x7e,
	0x71, 0x2b, 0xa6, 0x77, 0xec, 0x10, 0xae, 0x3f, 0x1b, 0xfc, 0x68, 0xf2, 0xfa, 0xd3, 0x00, 0x00,
	0x00, 0xff, 0xff, 0x5c, 0x00, 0x03, 0x48, 0x8f, 0x12, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Queries a validator by index.
	Validator(ctx context.Context, in *QueryGetValidatorRequest, opts ...grpc.CallOption) (*QueryGetValidatorResponse, error)
	// Queries a list of validator items.
	ValidatorAll(ctx context.Context, in *QueryAllValidatorRequest, opts ...grpc.CallOption) (*QueryAllValidatorResponse, error)
	// Queries a lastValidatorPower by index.
	LastValidatorPower(ctx context.Context, in *QueryGetLastValidatorPowerRequest, opts ...grpc.CallOption) (*QueryGetLastValidatorPowerResponse, error)
	// Queries a list of lastValidatorPower items.
	LastValidatorPowerAll(ctx context.Context, in *QueryAllLastValidatorPowerRequest, opts ...grpc.CallOption) (*QueryAllLastValidatorPowerResponse, error)
	// Queries a ProposedDisableValidator by index.
	ProposedDisableValidator(ctx context.Context, in *QueryGetProposedDisableValidatorRequest, opts ...grpc.CallOption) (*QueryGetProposedDisableValidatorResponse, error)
	// Queries a list of ProposedDisableValidator items.
	ProposedDisableValidatorAll(ctx context.Context, in *QueryAllProposedDisableValidatorRequest, opts ...grpc.CallOption) (*QueryAllProposedDisableValidatorResponse, error)
	// Queries a DisabledValidator by index.
	DisabledValidator(ctx context.Context, in *QueryGetDisabledValidatorRequest, opts ...grpc.CallOption) (*QueryGetDisabledValidatorResponse, error)
	// Queries a list of DisabledValidator items.
	DisabledValidatorAll(ctx context.Context, in *QueryAllDisabledValidatorRequest, opts ...grpc.CallOption) (*QueryAllDisabledValidatorResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Validator(ctx context.Context, in *QueryGetValidatorRequest, opts ...grpc.CallOption) (*QueryGetValidatorResponse, error) {
	out := new(QueryGetValidatorResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/Validator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ValidatorAll(ctx context.Context, in *QueryAllValidatorRequest, opts ...grpc.CallOption) (*QueryAllValidatorResponse, error) {
	out := new(QueryAllValidatorResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/ValidatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastValidatorPower(ctx context.Context, in *QueryGetLastValidatorPowerRequest, opts ...grpc.CallOption) (*QueryGetLastValidatorPowerResponse, error) {
	out := new(QueryGetLastValidatorPowerResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/LastValidatorPower", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastValidatorPowerAll(ctx context.Context, in *QueryAllLastValidatorPowerRequest, opts ...grpc.CallOption) (*QueryAllLastValidatorPowerResponse, error) {
	out := new(QueryAllLastValidatorPowerResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/LastValidatorPowerAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedDisableValidator(ctx context.Context, in *QueryGetProposedDisableValidatorRequest, opts ...grpc.CallOption) (*QueryGetProposedDisableValidatorResponse, error) {
	out := new(QueryGetProposedDisableValidatorResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/ProposedDisableValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ProposedDisableValidatorAll(ctx context.Context, in *QueryAllProposedDisableValidatorRequest, opts ...grpc.CallOption) (*QueryAllProposedDisableValidatorResponse, error) {
	out := new(QueryAllProposedDisableValidatorResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/ProposedDisableValidatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DisabledValidator(ctx context.Context, in *QueryGetDisabledValidatorRequest, opts ...grpc.CallOption) (*QueryGetDisabledValidatorResponse, error) {
	out := new(QueryGetDisabledValidatorResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/DisabledValidator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DisabledValidatorAll(ctx context.Context, in *QueryAllDisabledValidatorRequest, opts ...grpc.CallOption) (*QueryAllDisabledValidatorResponse, error) {
	out := new(QueryAllDisabledValidatorResponse)
	err := c.cc.Invoke(ctx, "/zigbeealliance.distributedcomplianceledger.validator.Query/DisabledValidatorAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Queries a validator by index.
	Validator(context.Context, *QueryGetValidatorRequest) (*QueryGetValidatorResponse, error)
	// Queries a list of validator items.
	ValidatorAll(context.Context, *QueryAllValidatorRequest) (*QueryAllValidatorResponse, error)
	// Queries a lastValidatorPower by index.
	LastValidatorPower(context.Context, *QueryGetLastValidatorPowerRequest) (*QueryGetLastValidatorPowerResponse, error)
	// Queries a list of lastValidatorPower items.
	LastValidatorPowerAll(context.Context, *QueryAllLastValidatorPowerRequest) (*QueryAllLastValidatorPowerResponse, error)
	// Queries a ProposedDisableValidator by index.
	ProposedDisableValidator(context.Context, *QueryGetProposedDisableValidatorRequest) (*QueryGetProposedDisableValidatorResponse, error)
	// Queries a list of ProposedDisableValidator items.
	ProposedDisableValidatorAll(context.Context, *QueryAllProposedDisableValidatorRequest) (*QueryAllProposedDisableValidatorResponse, error)
	// Queries a DisabledValidator by index.
	DisabledValidator(context.Context, *QueryGetDisabledValidatorRequest) (*QueryGetDisabledValidatorResponse, error)
	// Queries a list of DisabledValidator items.
	DisabledValidatorAll(context.Context, *QueryAllDisabledValidatorRequest) (*QueryAllDisabledValidatorResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Validator(ctx context.Context, req *QueryGetValidatorRequest) (*QueryGetValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Validator not implemented")
}
func (*UnimplementedQueryServer) ValidatorAll(ctx context.Context, req *QueryAllValidatorRequest) (*QueryAllValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ValidatorAll not implemented")
}
func (*UnimplementedQueryServer) LastValidatorPower(ctx context.Context, req *QueryGetLastValidatorPowerRequest) (*QueryGetLastValidatorPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastValidatorPower not implemented")
}
func (*UnimplementedQueryServer) LastValidatorPowerAll(ctx context.Context, req *QueryAllLastValidatorPowerRequest) (*QueryAllLastValidatorPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastValidatorPowerAll not implemented")
}
func (*UnimplementedQueryServer) ProposedDisableValidator(ctx context.Context, req *QueryGetProposedDisableValidatorRequest) (*QueryGetProposedDisableValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedDisableValidator not implemented")
}
func (*UnimplementedQueryServer) ProposedDisableValidatorAll(ctx context.Context, req *QueryAllProposedDisableValidatorRequest) (*QueryAllProposedDisableValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProposedDisableValidatorAll not implemented")
}
func (*UnimplementedQueryServer) DisabledValidator(ctx context.Context, req *QueryGetDisabledValidatorRequest) (*QueryGetDisabledValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisabledValidator not implemented")
}
func (*UnimplementedQueryServer) DisabledValidatorAll(ctx context.Context, req *QueryAllDisabledValidatorRequest) (*QueryAllDisabledValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DisabledValidatorAll not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Validator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Validator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/Validator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Validator(ctx, req.(*QueryGetValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ValidatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ValidatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/ValidatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ValidatorAll(ctx, req.(*QueryAllValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastValidatorPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetLastValidatorPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastValidatorPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/LastValidatorPower",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastValidatorPower(ctx, req.(*QueryGetLastValidatorPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastValidatorPowerAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllLastValidatorPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastValidatorPowerAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/LastValidatorPowerAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastValidatorPowerAll(ctx, req.(*QueryAllLastValidatorPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedDisableValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetProposedDisableValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedDisableValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/ProposedDisableValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedDisableValidator(ctx, req.(*QueryGetProposedDisableValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ProposedDisableValidatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllProposedDisableValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ProposedDisableValidatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/ProposedDisableValidatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ProposedDisableValidatorAll(ctx, req.(*QueryAllProposedDisableValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DisabledValidator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryGetDisabledValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DisabledValidator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/DisabledValidator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DisabledValidator(ctx, req.(*QueryGetDisabledValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DisabledValidatorAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllDisabledValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DisabledValidatorAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/zigbeealliance.distributedcomplianceledger.validator.Query/DisabledValidatorAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DisabledValidatorAll(ctx, req.(*QueryAllDisabledValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "zigbeealliance.distributedcomplianceledger.validator.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Validator",
			Handler:    _Query_Validator_Handler,
		},
		{
			MethodName: "ValidatorAll",
			Handler:    _Query_ValidatorAll_Handler,
		},
		{
			MethodName: "LastValidatorPower",
			Handler:    _Query_LastValidatorPower_Handler,
		},
		{
			MethodName: "LastValidatorPowerAll",
			Handler:    _Query_LastValidatorPowerAll_Handler,
		},
		{
			MethodName: "ProposedDisableValidator",
			Handler:    _Query_ProposedDisableValidator_Handler,
		},
		{
			MethodName: "ProposedDisableValidatorAll",
			Handler:    _Query_ProposedDisableValidatorAll_Handler,
		},
		{
			MethodName: "DisabledValidator",
			Handler:    _Query_DisabledValidator_Handler,
		},
		{
			MethodName: "DisabledValidatorAll",
			Handler:    _Query_DisabledValidatorAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "validator/query.proto",
}

func (m *QueryGetValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Validator) > 0 {
		for iNdEx := len(m.Validator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Validator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastValidatorPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastValidatorPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastValidatorPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetLastValidatorPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetLastValidatorPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetLastValidatorPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.LastValidatorPower.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllLastValidatorPowerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastValidatorPowerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastValidatorPowerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllLastValidatorPowerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllLastValidatorPowerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllLastValidatorPowerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.LastValidatorPower) > 0 {
		for iNdEx := len(m.LastValidatorPower) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.LastValidatorPower[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedDisableValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedDisableValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedDisableValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetProposedDisableValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetProposedDisableValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetProposedDisableValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ProposedDisableValidator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedDisableValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedDisableValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedDisableValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllProposedDisableValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllProposedDisableValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllProposedDisableValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.ProposedDisableValidator) > 0 {
		for iNdEx := len(m.ProposedDisableValidator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.ProposedDisableValidator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDisabledValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDisabledValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDisabledValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryGetDisabledValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryGetDisabledValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryGetDisabledValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DisabledValidator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAllDisabledValidatorRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDisabledValidatorRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDisabledValidatorRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllDisabledValidatorResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllDisabledValidatorResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllDisabledValidatorResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pagination != nil {
		{
			size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.DisabledValidator) > 0 {
		for iNdEx := len(m.DisabledValidator) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.DisabledValidator[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryGetValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Validator) > 0 {
		for _, e := range m.Validator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastValidatorPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetLastValidatorPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.LastValidatorPower.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllLastValidatorPowerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllLastValidatorPowerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.LastValidatorPower) > 0 {
		for _, e := range m.LastValidatorPower {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedDisableValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetProposedDisableValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ProposedDisableValidator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllProposedDisableValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllProposedDisableValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ProposedDisableValidator) > 0 {
		for _, e := range m.ProposedDisableValidator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDisabledValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryGetDisabledValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DisabledValidator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAllDisabledValidatorRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllDisabledValidatorResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.DisabledValidator) > 0 {
		for _, e := range m.DisabledValidator {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	if m.Pagination != nil {
		l = m.Pagination.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryGetValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Validator = append(m.Validator, Validator{})
			if err := m.Validator[len(m.Validator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastValidatorPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastValidatorPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastValidatorPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetLastValidatorPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetLastValidatorPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetLastValidatorPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidatorPower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.LastValidatorPower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastValidatorPowerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastValidatorPowerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastValidatorPowerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllLastValidatorPowerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllLastValidatorPowerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllLastValidatorPowerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastValidatorPower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastValidatorPower = append(m.LastValidatorPower, LastValidatorPower{})
			if err := m.LastValidatorPower[len(m.LastValidatorPower)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedDisableValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedDisableValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedDisableValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetProposedDisableValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetProposedDisableValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetProposedDisableValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedDisableValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ProposedDisableValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedDisableValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedDisableValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedDisableValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllProposedDisableValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllProposedDisableValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllProposedDisableValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposedDisableValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProposedDisableValidator = append(m.ProposedDisableValidator, ProposedDisableValidator{})
			if err := m.ProposedDisableValidator[len(m.ProposedDisableValidator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDisabledValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDisabledValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDisabledValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryGetDisabledValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryGetDisabledValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryGetDisabledValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DisabledValidator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDisabledValidatorRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDisabledValidatorRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDisabledValidatorRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageRequest{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllDisabledValidatorResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllDisabledValidatorResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllDisabledValidatorResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DisabledValidator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DisabledValidator = append(m.DisabledValidator, DisabledValidator{})
			if err := m.DisabledValidator[len(m.DisabledValidator)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pagination == nil {
				m.Pagination = &query.PageResponse{}
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
